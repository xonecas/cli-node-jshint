#! /usr/bin/env node
/*jshint node:true, curly:true, onevar:true, maxlen:80 */

var jshint  = require('./jshint/jshint.js').JSHINT,
   fs       = require('fs'),
   path     = require('path'),
   args     = process.argv.slice(2),
   paths    = [],
   options  = {},
   files    = {},
   hasProp  = Object.prototype.hasOwnProperty,
   keyValuePair;

args.forEach(function (arg) {
   if (arg.indexOf('/') !== -1) {
      /* path to js file */
      paths.push(arg);
   } else {
      /* jshint option */
      keyValuePair = arg.split(':');
      options[keyValuePair[0]] = keyValuePair[1];
   }
});

function reportErrors (file, errors) {
   var str = "";

   file = path.basename(file);

   errors.forEach(function (err) {
      /* Same error reporting syntax as @brentlintner's
         so that it works with 3rd party plugins (vim/emacs?) */
      str += file + ': line '+ err.line + ', col ' + err.character +
         ', ' + err.reason + '\n';
   });

   console.log(str +"\n"+ errors.length + ' error(s)');
}

function parseFiles() {
   var prop;

   for (prop in files) {
      if (hasProp.call(files, prop)) {
         if (jshint(files[prop], options)) {
            console.log("Hooray, no lint!");
            process.exit(0);
         } else {
            reportErrors(prop, jshint.errors);
            process.exit(1);
         }
      }
   }
}

(function readAll () {
   var filepath;

   if (paths.length > 0) {
      filepath = paths.shift();
      fs.readFile(filepath, 'utf8', function (err, out) {
         if (err) 
            throw err;
         

         files[filepath] = out;
   
         readAll();
      });
   } else {
      parseFiles();
   }
}) ();
